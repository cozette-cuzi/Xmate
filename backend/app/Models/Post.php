<?php

namespace App\Models;

use App\Services\UserService;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class Post extends Model
{
    use HasFactory;

    protected $guarded = ['id'];

    public function scopeJoins($query)
    {
        return $query->join('groups', 'groups.id', '=', 'posts.group_id')
            ->join('users', 'users.id', '=', 'posts.user_id');
    }

    public function scopeSelectShow($query)
    {
        $query->joins()->select('posts.*', 'groups.id as group_id', 'groups.name as group_name', 'users.name as user_name', 'users.image');
    }

    public function likes()
    {
        return $this->postActionsShow()->where('type', 'like');
    }

    public function postActionsShow()
    {
        return $this->postActions()->joins()->selectShow();
    }

    public function postActions()
    {
        return $this->hasMany(PostAction::class);
    }

    public function comments()
    {
        return $this->postActionsShow()->where('type', 'comment');
    }

    public function toArray()
    {
        $data = parent::toArray(); // TODO: Change the autogenerated stub

        $isLiked = PostAction::where('post_id', $data['id'])->where('type', 'like')->where('user_id', Auth::id())->first();
        if ($isLiked) {
            $data['is_liked'] = true;
        } else {
            $data['is_liked'] = false;
        }
        $data['likes_counter'] = PostAction::where('post_id', $data['id'])->where('type', 'like')->count();
        $data['comments_counter'] = PostAction::where('post_id', $data['id'])->where('type', 'comment')->count();


        return $data;
    }

    public function scopeFilter($query, $filter = null, $filterType = null, $userId = null, $groupId = null)
    {
        if (isset($filter['type']) and $filter['type'] == 'users' and $filter['user_id']) {
            $query->where('posts.user_id', $filter['user_id']);

        } else if (isset($filter['type']) and $filter['type'] == 'groups' and $filter['group_id']) {
            $query->where('posts.group_id', $filter['group_id']);
        }

        if ($filterType == 'users' and $userId) {
            $query->where('posts.user_id', $userId);

        } else if ($filterType == 'groups' and $groupId) {
            $query->where('posts.group_id', $groupId);
        }
        $query->orderBy('created_at', 'desc');


        return $query;
    }
}
